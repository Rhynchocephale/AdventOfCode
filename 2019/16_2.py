data = 59713137269801099632654181286233935219811755500455380934770765569131734596763695509279561685788856471420060118738307712184666979727705799202164390635688439701763288535574113283975613430058332890215685102656193056939765590473237031584326028162831872694742473094498692690926378560215065112055277042957192884484736885085776095601258138827407479864966595805684283736114104361200511149403415264005242802552220930514486188661282691447267079869746222193563352374541269431531666903127492467446100184447658357579189070698707540721959527692466414290626633017164810627099243281653139996025661993610763947987942741831185002756364249992028050315704531567916821944
data = [y for y in [int(x) for x in list(str(data))]*10000]

def patternMaker(i):
	p = []
	while len(p) <= len(data):
		for j in range(i+1):
			p.append(0)
		for j in range(i+1):
			p.append(1)
		for j in range(i+1):
			p.append(0)
		for j in range(i+1):
			p.append(-1)
	return p[1:]
	
def timesPattern(num,i):
	p = patternMaker(i)
	somme = 0
	for i in range(len(num)):
		somme += num[i]*p[i]
	return int(str(somme)[-1])
	
def oneStep(num):
	result = []
	for i in range(len(num)):
		result.append(timesPattern(num,i))
	return result

i=0
while True:
	i+=1
	data = oneStep(data)
	print(i, ''.join([str(x) for x in data])[:8])
	if i>100:
		break
	
